/*
 * This file is generated by jOOQ.
 */
package com.lk.model.dbModels.generated.tables;


import com.lk.model.dbModels.generated.Keys;
import com.lk.model.dbModels.generated.Public;
import com.lk.model.dbModels.generated.tables.records.PayoutsRecord;

import java.time.LocalDate;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Payouts extends TableImpl<PayoutsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.payouts</code>
     */
    public static final Payouts PAYOUTS = new Payouts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PayoutsRecord> getRecordType() {
        return PayoutsRecord.class;
    }

    /**
     * The column <code>public.payouts.payout_id</code>.
     */
    public final TableField<PayoutsRecord, Integer> PAYOUT_ID = createField(DSL.name("payout_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.payouts.currency</code>.
     */
    public final TableField<PayoutsRecord, String> CURRENCY = createField(DSL.name("currency"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.payouts.amount</code>.
     */
    public final TableField<PayoutsRecord, Float> AMOUNT = createField(DSL.name("amount"), SQLDataType.REAL, this, "");

    /**
     * The column <code>public.payouts.address_to</code>.
     */
    public final TableField<PayoutsRecord, String> ADDRESS_TO = createField(DSL.name("address_to"), SQLDataType.VARCHAR(120), this, "");

    /**
     * The column <code>public.payouts.status</code>.
     */
    public final TableField<PayoutsRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(15), this, "");

    /**
     * The column <code>public.payouts.created_at</code>.
     */
    public final TableField<PayoutsRecord, LocalDate> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATE, this, "");

    private Payouts(Name alias, Table<PayoutsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Payouts(Name alias, Table<PayoutsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.payouts</code> table reference
     */
    public Payouts(String alias) {
        this(DSL.name(alias), PAYOUTS);
    }

    /**
     * Create an aliased <code>public.payouts</code> table reference
     */
    public Payouts(Name alias) {
        this(alias, PAYOUTS);
    }

    /**
     * Create a <code>public.payouts</code> table reference
     */
    public Payouts() {
        this(DSL.name("payouts"), null);
    }

    public <O extends Record> Payouts(Table<O> child, ForeignKey<O, PayoutsRecord> key) {
        super(child, key, PAYOUTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<PayoutsRecord> getPrimaryKey() {
        return Keys.PAYOUTS_PKEY;
    }

    @Override
    public Payouts as(String alias) {
        return new Payouts(DSL.name(alias), this);
    }

    @Override
    public Payouts as(Name alias) {
        return new Payouts(alias, this);
    }

    @Override
    public Payouts as(Table<?> alias) {
        return new Payouts(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Payouts rename(String name) {
        return new Payouts(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Payouts rename(Name name) {
        return new Payouts(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Payouts rename(Table<?> name) {
        return new Payouts(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, Float, String, String, LocalDate> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Integer, ? super String, ? super Float, ? super String, ? super String, ? super LocalDate, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Integer, ? super String, ? super Float, ? super String, ? super String, ? super LocalDate, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
