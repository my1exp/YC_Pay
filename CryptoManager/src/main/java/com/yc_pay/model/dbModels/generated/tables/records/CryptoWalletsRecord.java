/*
 * This file is generated by jOOQ.
 */
package com.yc_pay.model.dbModels.generated.tables.records;


import com.yc_pay.model.dbModels.generated.tables.CryptoWallets;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CryptoWalletsRecord extends UpdatableRecordImpl<CryptoWalletsRecord> implements Record8<Integer, String, String, String, String, String, LocalDateTime, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.crypto_wallets.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.crypto_wallets.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.crypto_wallets.currency_crypto</code>.
     */
    public void setCurrencyCrypto(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.crypto_wallets.currency_crypto</code>.
     */
    public String getCurrencyCrypto() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.crypto_wallets.network</code>.
     */
    public void setNetwork(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.crypto_wallets.network</code>.
     */
    public String getNetwork() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.crypto_wallets.public_key</code>.
     */
    public void setPublicKey(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.crypto_wallets.public_key</code>.
     */
    public String getPublicKey() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.crypto_wallets.private_key</code>.
     */
    public void setPrivateKey(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.crypto_wallets.private_key</code>.
     */
    public String getPrivateKey() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.crypto_wallets.address</code>.
     */
    public void setAddress(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.crypto_wallets.address</code>.
     */
    public String getAddress() {
        return (String) get(5);
    }

    /**
     * Setter for <code>public.crypto_wallets.create_date</code>.
     */
    public void setCreateDate(LocalDateTime value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.crypto_wallets.create_date</code>.
     */
    public LocalDateTime getCreateDate() {
        return (LocalDateTime) get(6);
    }

    /**
     * Setter for <code>public.crypto_wallets.type</code>.
     */
    public void setType(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.crypto_wallets.type</code>.
     */
    public String getType() {
        return (String) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, String, String, String, String, LocalDateTime, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<Integer, String, String, String, String, String, LocalDateTime, String> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return CryptoWallets.CRYPTO_WALLETS.ID;
    }

    @Override
    public Field<String> field2() {
        return CryptoWallets.CRYPTO_WALLETS.CURRENCY_CRYPTO;
    }

    @Override
    public Field<String> field3() {
        return CryptoWallets.CRYPTO_WALLETS.NETWORK;
    }

    @Override
    public Field<String> field4() {
        return CryptoWallets.CRYPTO_WALLETS.PUBLIC_KEY;
    }

    @Override
    public Field<String> field5() {
        return CryptoWallets.CRYPTO_WALLETS.PRIVATE_KEY;
    }

    @Override
    public Field<String> field6() {
        return CryptoWallets.CRYPTO_WALLETS.ADDRESS;
    }

    @Override
    public Field<LocalDateTime> field7() {
        return CryptoWallets.CRYPTO_WALLETS.CREATE_DATE;
    }

    @Override
    public Field<String> field8() {
        return CryptoWallets.CRYPTO_WALLETS.TYPE;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getCurrencyCrypto();
    }

    @Override
    public String component3() {
        return getNetwork();
    }

    @Override
    public String component4() {
        return getPublicKey();
    }

    @Override
    public String component5() {
        return getPrivateKey();
    }

    @Override
    public String component6() {
        return getAddress();
    }

    @Override
    public LocalDateTime component7() {
        return getCreateDate();
    }

    @Override
    public String component8() {
        return getType();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getCurrencyCrypto();
    }

    @Override
    public String value3() {
        return getNetwork();
    }

    @Override
    public String value4() {
        return getPublicKey();
    }

    @Override
    public String value5() {
        return getPrivateKey();
    }

    @Override
    public String value6() {
        return getAddress();
    }

    @Override
    public LocalDateTime value7() {
        return getCreateDate();
    }

    @Override
    public String value8() {
        return getType();
    }

    @Override
    public CryptoWalletsRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public CryptoWalletsRecord value2(String value) {
        setCurrencyCrypto(value);
        return this;
    }

    @Override
    public CryptoWalletsRecord value3(String value) {
        setNetwork(value);
        return this;
    }

    @Override
    public CryptoWalletsRecord value4(String value) {
        setPublicKey(value);
        return this;
    }

    @Override
    public CryptoWalletsRecord value5(String value) {
        setPrivateKey(value);
        return this;
    }

    @Override
    public CryptoWalletsRecord value6(String value) {
        setAddress(value);
        return this;
    }

    @Override
    public CryptoWalletsRecord value7(LocalDateTime value) {
        setCreateDate(value);
        return this;
    }

    @Override
    public CryptoWalletsRecord value8(String value) {
        setType(value);
        return this;
    }

    @Override
    public CryptoWalletsRecord values(Integer value1, String value2, String value3, String value4, String value5, String value6, LocalDateTime value7, String value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CryptoWalletsRecord
     */
    public CryptoWalletsRecord() {
        super(CryptoWallets.CRYPTO_WALLETS);
    }

    /**
     * Create a detached, initialised CryptoWalletsRecord
     */
    public CryptoWalletsRecord(Integer id, String currencyCrypto, String network, String publicKey, String privateKey, String address, LocalDateTime createDate, String type) {
        super(CryptoWallets.CRYPTO_WALLETS);

        setId(id);
        setCurrencyCrypto(currencyCrypto);
        setNetwork(network);
        setPublicKey(publicKey);
        setPrivateKey(privateKey);
        setAddress(address);
        setCreateDate(createDate);
        setType(type);
        resetChangedOnNotNull();
    }
}
