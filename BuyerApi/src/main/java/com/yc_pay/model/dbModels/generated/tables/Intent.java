/*
 * This file is generated by jOOQ.
 */
package com.yc_pay.model.dbModels.generated.tables;


import com.yc_pay.model.dbModels.generated.Keys;
import com.yc_pay.model.dbModels.generated.Public;
import com.yc_pay.model.dbModels.generated.tables.records.IntentRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function12;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Intent extends TableImpl<IntentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.intent</code>
     */
    public static final Intent INTENT = new Intent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IntentRecord> getRecordType() {
        return IntentRecord.class;
    }

    /**
     * The column <code>public.intent.request_id</code>.
     */
    public final TableField<IntentRecord, String> REQUEST_ID = createField(DSL.name("request_id"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.intent.session_id</code>.
     */
    public final TableField<IntentRecord, String> SESSION_ID = createField(DSL.name("session_id"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.intent.currency</code>.
     */
    public final TableField<IntentRecord, String> CURRENCY = createField(DSL.name("currency"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.intent.amount_fiat</code>.
     */
    public final TableField<IntentRecord, BigDecimal> AMOUNT_FIAT = createField(DSL.name("amount_fiat"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.intent.network</code>.
     */
    public final TableField<IntentRecord, String> NETWORK = createField(DSL.name("network"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.intent.merchant_id</code>.
     */
    public final TableField<IntentRecord, String> MERCHANT_ID = createField(DSL.name("merchant_id"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.intent.wallet_to</code>.
     */
    public final TableField<IntentRecord, String> WALLET_TO = createField(DSL.name("wallet_to"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.intent.create_date</code>.
     */
    public final TableField<IntentRecord, LocalDateTime> CREATE_DATE = createField(DSL.name("create_date"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.intent.category</code>.
     */
    public final TableField<IntentRecord, String> CATEGORY = createField(DSL.name("category"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.intent.status</code>.
     */
    public final TableField<IntentRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.intent.wallet_id</code>.
     */
    public final TableField<IntentRecord, Integer> WALLET_ID = createField(DSL.name("wallet_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.intent.amount_crypto</code>.
     */
    public final TableField<IntentRecord, BigDecimal> AMOUNT_CRYPTO = createField(DSL.name("amount_crypto"), SQLDataType.NUMERIC, this, "");

    private Intent(Name alias, Table<IntentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Intent(Name alias, Table<IntentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.intent</code> table reference
     */
    public Intent(String alias) {
        this(DSL.name(alias), INTENT);
    }

    /**
     * Create an aliased <code>public.intent</code> table reference
     */
    public Intent(Name alias) {
        this(alias, INTENT);
    }

    /**
     * Create a <code>public.intent</code> table reference
     */
    public Intent() {
        this(DSL.name("intent"), null);
    }

    public <O extends Record> Intent(Table<O> child, ForeignKey<O, IntentRecord> key) {
        super(child, key, INTENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<IntentRecord> getPrimaryKey() {
        return Keys.INTENT_PKEY;
    }

    @Override
    public Intent as(String alias) {
        return new Intent(DSL.name(alias), this);
    }

    @Override
    public Intent as(Name alias) {
        return new Intent(alias, this);
    }

    @Override
    public Intent as(Table<?> alias) {
        return new Intent(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Intent rename(String name) {
        return new Intent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Intent rename(Name name) {
        return new Intent(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Intent rename(Table<?> name) {
        return new Intent(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<String, String, String, BigDecimal, String, String, String, LocalDateTime, String, String, Integer, BigDecimal> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function12<? super String, ? super String, ? super String, ? super BigDecimal, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super String, ? super Integer, ? super BigDecimal, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function12<? super String, ? super String, ? super String, ? super BigDecimal, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super String, ? super Integer, ? super BigDecimal, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
