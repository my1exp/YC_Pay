/*
 * This file is generated by jOOQ.
 */
package com.yc_pay.model.dbModels.generated.tables;


import com.yc_pay.model.dbModels.generated.Keys;
import com.yc_pay.model.dbModels.generated.Public;
import com.yc_pay.model.dbModels.generated.tables.records.EntriesRecord;

import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Entries extends TableImpl<EntriesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.entries</code>
     */
    public static final Entries ENTRIES = new Entries();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EntriesRecord> getRecordType() {
        return EntriesRecord.class;
    }

    /**
     * The column <code>public.entries.id</code>.
     */
    public final TableField<EntriesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.entries.pocket</code>.
     */
    public final TableField<EntriesRecord, String> POCKET = createField(DSL.name("pocket"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.entries.amount</code>.
     */
    public final TableField<EntriesRecord, Double> AMOUNT = createField(DSL.name("amount"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.entries.currency</code>.
     */
    public final TableField<EntriesRecord, String> CURRENCY = createField(DSL.name("currency"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.entries.reference</code>.
     */
    public final TableField<EntriesRecord, String> REFERENCE = createField(DSL.name("reference"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.entries.created_dttm</code>.
     */
    public final TableField<EntriesRecord, LocalDateTime> CREATED_DTTM = createField(DSL.name("created_dttm"), SQLDataType.LOCALDATETIME(6), this, "");

    private Entries(Name alias, Table<EntriesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Entries(Name alias, Table<EntriesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.entries</code> table reference
     */
    public Entries(String alias) {
        this(DSL.name(alias), ENTRIES);
    }

    /**
     * Create an aliased <code>public.entries</code> table reference
     */
    public Entries(Name alias) {
        this(alias, ENTRIES);
    }

    /**
     * Create a <code>public.entries</code> table reference
     */
    public Entries() {
        this(DSL.name("entries"), null);
    }

    public <O extends Record> Entries(Table<O> child, ForeignKey<O, EntriesRecord> key) {
        super(child, key, ENTRIES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<EntriesRecord, Integer> getIdentity() {
        return (Identity<EntriesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<EntriesRecord> getPrimaryKey() {
        return Keys.ENTRIES_PKEY;
    }

    @Override
    public Entries as(String alias) {
        return new Entries(DSL.name(alias), this);
    }

    @Override
    public Entries as(Name alias) {
        return new Entries(alias, this);
    }

    @Override
    public Entries as(Table<?> alias) {
        return new Entries(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Entries rename(String name) {
        return new Entries(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Entries rename(Name name) {
        return new Entries(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Entries rename(Table<?> name) {
        return new Entries(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, Double, String, String, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Integer, ? super String, ? super Double, ? super String, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Integer, ? super String, ? super Double, ? super String, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
