/*
 * This file is generated by jOOQ.
 */
package com.lk.model.dbModels.generated.tables.records;


import com.lk.model.dbModels.generated.tables.Payouts;

import java.time.LocalDate;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PayoutsRecord extends UpdatableRecordImpl<PayoutsRecord> implements Record6<Integer, String, Float, String, String, LocalDate> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.payouts.payout_id</code>.
     */
    public void setPayoutId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.payouts.payout_id</code>.
     */
    public Integer getPayoutId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.payouts.currency</code>.
     */
    public void setCurrency(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.payouts.currency</code>.
     */
    public String getCurrency() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.payouts.amount</code>.
     */
    public void setAmount(Float value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.payouts.amount</code>.
     */
    public Float getAmount() {
        return (Float) get(2);
    }

    /**
     * Setter for <code>public.payouts.address_to</code>.
     */
    public void setAddressTo(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.payouts.address_to</code>.
     */
    public String getAddressTo() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.payouts.status</code>.
     */
    public void setStatus(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.payouts.status</code>.
     */
    public String getStatus() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.payouts.created_at</code>.
     */
    public void setCreatedAt(LocalDate value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.payouts.created_at</code>.
     */
    public LocalDate getCreatedAt() {
        return (LocalDate) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, Float, String, String, LocalDate> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    public Row6<Integer, String, Float, String, String, LocalDate> valuesRow() {
        return (Row6) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Payouts.PAYOUTS.PAYOUT_ID;
    }

    @Override
    public Field<String> field2() {
        return Payouts.PAYOUTS.CURRENCY;
    }

    @Override
    public Field<Float> field3() {
        return Payouts.PAYOUTS.AMOUNT;
    }

    @Override
    public Field<String> field4() {
        return Payouts.PAYOUTS.ADDRESS_TO;
    }

    @Override
    public Field<String> field5() {
        return Payouts.PAYOUTS.STATUS;
    }

    @Override
    public Field<LocalDate> field6() {
        return Payouts.PAYOUTS.CREATED_AT;
    }

    @Override
    public Integer component1() {
        return getPayoutId();
    }

    @Override
    public String component2() {
        return getCurrency();
    }

    @Override
    public Float component3() {
        return getAmount();
    }

    @Override
    public String component4() {
        return getAddressTo();
    }

    @Override
    public String component5() {
        return getStatus();
    }

    @Override
    public LocalDate component6() {
        return getCreatedAt();
    }

    @Override
    public Integer value1() {
        return getPayoutId();
    }

    @Override
    public String value2() {
        return getCurrency();
    }

    @Override
    public Float value3() {
        return getAmount();
    }

    @Override
    public String value4() {
        return getAddressTo();
    }

    @Override
    public String value5() {
        return getStatus();
    }

    @Override
    public LocalDate value6() {
        return getCreatedAt();
    }

    @Override
    public PayoutsRecord value1(Integer value) {
        setPayoutId(value);
        return this;
    }

    @Override
    public PayoutsRecord value2(String value) {
        setCurrency(value);
        return this;
    }

    @Override
    public PayoutsRecord value3(Float value) {
        setAmount(value);
        return this;
    }

    @Override
    public PayoutsRecord value4(String value) {
        setAddressTo(value);
        return this;
    }

    @Override
    public PayoutsRecord value5(String value) {
        setStatus(value);
        return this;
    }

    @Override
    public PayoutsRecord value6(LocalDate value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public PayoutsRecord values(Integer value1, String value2, Float value3, String value4, String value5, LocalDate value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PayoutsRecord
     */
    public PayoutsRecord() {
        super(Payouts.PAYOUTS);
    }

    /**
     * Create a detached, initialised PayoutsRecord
     */
    public PayoutsRecord(Integer payoutId, String currency, Float amount, String addressTo, String status, LocalDate createdAt) {
        super(Payouts.PAYOUTS);

        setPayoutId(payoutId);
        setCurrency(currency);
        setAmount(amount);
        setAddressTo(addressTo);
        setStatus(status);
        setCreatedAt(createdAt);
        resetChangedOnNotNull();
    }
}
