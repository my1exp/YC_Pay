/*
 * This file is generated by jOOQ.
 */
package com.yc_pay.model.dbModels.generated.tables;


import com.yc_pay.model.dbModels.generated.Keys;
import com.yc_pay.model.dbModels.generated.Public;
import com.yc_pay.model.dbModels.generated.tables.records.CryptopriceRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Cryptoprice extends TableImpl<CryptopriceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.cryptoprice</code>
     */
    public static final Cryptoprice CRYPTOPRICE = new Cryptoprice();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CryptopriceRecord> getRecordType() {
        return CryptopriceRecord.class;
    }

    /**
     * The column <code>public.cryptoprice.ticker</code>.
     */
    public final TableField<CryptopriceRecord, String> TICKER = createField(DSL.name("ticker"), SQLDataType.VARCHAR(15).nullable(false), this, "");

    /**
     * The column <code>public.cryptoprice.name</code>.
     */
    public final TableField<CryptopriceRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>public.cryptoprice.price</code>.
     */
    public final TableField<CryptopriceRecord, BigDecimal> PRICE = createField(DSL.name("price"), SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.cryptoprice.update_dttm</code>.
     */
    public final TableField<CryptopriceRecord, LocalDateTime> UPDATE_DTTM = createField(DSL.name("update_dttm"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private Cryptoprice(Name alias, Table<CryptopriceRecord> aliased) {
        this(alias, aliased, null);
    }

    private Cryptoprice(Name alias, Table<CryptopriceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.cryptoprice</code> table reference
     */
    public Cryptoprice(String alias) {
        this(DSL.name(alias), CRYPTOPRICE);
    }

    /**
     * Create an aliased <code>public.cryptoprice</code> table reference
     */
    public Cryptoprice(Name alias) {
        this(alias, CRYPTOPRICE);
    }

    /**
     * Create a <code>public.cryptoprice</code> table reference
     */
    public Cryptoprice() {
        this(DSL.name("cryptoprice"), null);
    }

    public <O extends Record> Cryptoprice(Table<O> child, ForeignKey<O, CryptopriceRecord> key) {
        super(child, key, CRYPTOPRICE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<CryptopriceRecord> getPrimaryKey() {
        return Keys.CRYPTOPRICE_PKEY;
    }

    @Override
    public Cryptoprice as(String alias) {
        return new Cryptoprice(DSL.name(alias), this);
    }

    @Override
    public Cryptoprice as(Name alias) {
        return new Cryptoprice(alias, this);
    }

    @Override
    public Cryptoprice as(Table<?> alias) {
        return new Cryptoprice(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Cryptoprice rename(String name) {
        return new Cryptoprice(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cryptoprice rename(Name name) {
        return new Cryptoprice(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cryptoprice rename(Table<?> name) {
        return new Cryptoprice(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, BigDecimal, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super String, ? super String, ? super BigDecimal, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super String, ? super String, ? super BigDecimal, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
